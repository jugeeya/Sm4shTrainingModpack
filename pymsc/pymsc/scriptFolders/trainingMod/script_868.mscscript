        begin 0x0, 0x2
        #pushInt. 0x7
        #pushInt. 0x1
        #pushInt. noDIFirstPointVar
        #sys 0x3, 0x16

        pushInt. 0x6
        pushInt. 0x1000003e
        sys. 0x2, 0x16
        pushInt. 0x0
        lessOrEqual.
        if hitstunEnded
          try. showMod
            pushInt. doMod
            callFunc 0x0
          showMod:

          pushInt. 0x6
          pushInt. mashToggleVar
          sys. 0x2, 0x16
          pushInt. mashJump
          equals.
          bitAnd.
          if shouldMashJump
            pushInt. 0x6
            pushInt. 0x10000001
            sys. 0x2, 0x16
            pushInt. 0x6
            pushInt. 0x10000002
            sys. 0x2, 0x16
            lessThan.
            if tryJump
              pushVar. 0x1, 0x12
              pushInt. 0x2
              equals.
              pushInt. 0x15
              pushInt. 0x1e00003e
              sys. 0x2, 0x16
              pushInt. 0x15
              pushInt. 0x1e00003f
              sys. 0x2, 0x16
              pushInt. 0x1c
              pushInt. 0x1f000011
              sys. 0x2, 0x16
              bitOr.
              bitOr.
              bitAnd.
              if aerialJump
                try aerialJumpAction
                pushInt. 0x7
                pushInt. 0x6
                pushInt. 0x10000001
                sys. 0x2, 0x16 # get numJumpsUsed
                pushInt. 0x1
                addi.
                pushInt. 0x10000001
                sys 0x3, 0x16 # set numJumpsUsed = numJumpsUsed + 1

                pushInt. 0x6
                pushInt. 0x1300010c
                sys. 0x2, 0x16
                pushInt. 0x1
                equals.
                if normalJumpType
                 pushInt. 0xc
                 else callJumpAction
                normalJumpType:
                  pushInt. 0xd
                callJumpAction:
                pushInt. 0x1
                pushInt. script_16
                callFunc 0x2
                aerialJumpAction:
                else shouldMashJump
              aerialJump:
                pushInt. 0x15
                pushInt. 0x1e00002b
                sys. 0x2, 0x16
                pushInt. 0x15
                pushInt. 0x1e00002c
                sys. 0x2, 0x16
                pushInt. 0x1c
                pushInt. 0x1f000006
                sys. 0x2, 0x16
                bitOr.
                bitOr.
                if tryJump
                try tryJump
                pushInt. 0x7
                pushInt. 0x6
                pushInt. 0x10000001
                sys. 0x2, 0x16 # get numJumpsUsed
                pushInt. 0x1
                addi.
                pushInt. 0x10000001
                sys 0x3, 0x16 # set numJumpsUsed = numJumpsUsed + 1
                
                pushInt. 0xb
                pushInt. 0x1
                pushInt. script_16
                callFunc 0x2
            tryJump:
          shouldMashJump:
          try. showMod2
            pushInt. doMod
            callFunc 0x0
          showMod2:

          pushInt. 0x6
          pushInt. mashToggleVar
          sys. 0x2, 0x16
          pushInt. mashAirdodge
          equals.
          bitAnd.

          # pushInt. 0x6
          # pushInt. 0x2000218
          # sys. 0x2, 0x16
          # pushInt. 10.0f
          # floatLess.# noBufferVar < 10 (should be 0.8)
          # pushInt. 0x6
          # pushInt. canReallyAnyActionVar
          # sys. 0x2, 0x16
          # pushInt. 1.0f
          # equals.
          # bitAnd.

          # old, working
          # pushInt. 0x15
          # pushInt. 0x1e00003d
          # sys. 0x2, 0x16
          # pushInt. 0x1c
          # pushInt. 0x1f00000d
          # sys. 0x2, 0x16
          # bitOr.
          # bitAnd.
          if shouldMashAirdodge
            pushVar. 0x1, 0x12
            pushInt. 0x2
            equals.
            pushInt. 0x15
            pushInt. 0x1e00003d
            sys. 0x2, 0x16
            pushInt. 0x1c
            pushInt. 0x1f00000d
            sys. 0x2, 0x16
            bitOr.
            bitAnd.
            if tryAirdodge
              try tryAirdodgeAction
              pushInt. 0x22
              pushInt. 0x0
              pushInt. script_16 # airdodge
              callFunc 0x2
              tryAirdodgeAction:
            else shouldMashAirdodge
            tryAirdodge:
            pushVar. 0x1, 0x12
            pushInt. 0x0
            equals.
            pushInt. 0x15
            pushInt. 0x1e000029
            sys. 0x2, 0x16
            pushInt. 0x1c
            pushInt. 0x1f000005
            sys. 0x2, 0x16
            bitOr.
            bitAnd.
            if tryShieldOn
              try tryShieldOn
              pushInt. 0x1b
              pushInt. 0x0
              pushInt. script_16 # shield on
              callFunc 0x2
            tryShieldOn:
          shouldMashAirdodge:

          try. showMod3
            pushInt. doMod
            callFunc 0x0
          showMod3:

          pushInt. 0x6
          pushInt. mashToggleVar
          sys. 0x2, 0x16
          pushInt. mashAttack
          equals.
          bitAnd.

          # pushInt. 0x6
          # pushInt. 0x2000218
          # sys. 0x2, 0x16
          # pushInt. 10.0f
          # floatLess. # noBufferVar < 10 (should be 0.8)

          if tryAerial
            pushVar. 0x1, 0x12
            pushInt. 0x2
            equals.
            pushInt. 0x15
            pushInt. 0x1e000061
            sys. 0x2, 0x16
            pushInt. 0x1c
            pushInt. 0x1f00000e
            sys. 0x2, 0x16
            bitOr.
            bitAnd.
            if tryAerial
              try tryAerial
              pushInt. 0x6
              pushInt. mashAttackVar
              sys. 0x2, 0x16
              pushInt. 5.0f
              floatLessOrEqual.
              if aerialAttack
                pushInt. 0x34
                else callActionAerial
              aerialAttack:
                pushInt. 0x1c
                pushInt. 0x1f00000a
                sys. 0x2, 0x16

                pushInt. 0x15
                pushInt. 0x1e000062
                pushInt. 0x6
                pushInt. mashAttackVar
                sys. 0x2, 0x16
                pushInt. 6.0f
                subf.
                floatToInt 0x0
                addi.
                sys. 0x2, 0x16
                bitOr.
                if tryAerial
                  pushInt. 0x6
                  pushInt. mashAttackVar
                  sys. 0x2, 0x16
                  pushInt. 6.0f
                  subf.
                  floatToInt 0x0
                  pushInt. 0x152
                  addi.
              callActionAerial:
              pushInt. 0x0
              pushInt. script_16
              callFunc 0x2
            tryAerial:
        hitstunEnded:
        pushInt. 0x10
        pushInt. 0x2100000e
        sys. 0x2, 0x16
        not.
        if loc_3D
        pushInt. 0x6
        pushInt. 0x1000003e
        sys. 0x2, 0x16
        pushInt. 0x0
        lessOrEqual.
        if loc_3D
        pushInt. 0x2710
        pushInt. 0x2100000e
        sys 0x2, 0x16




loc_3D:
        pushInt. 0x10
        pushInt. 0x20000076
        sys. 0x2, 0x16
        if loc_6C
        pushInt. 0x2
        pushInt. 0x7
        sys. 0x2, 0x2a
        not.
        if loc_6C
        pushInt. 0x1
        else loc_71

loc_6C:
        pushInt. 0x0

loc_71:
        if loc_8F
        pushVar. 0x1, 0x9
        pushInt. 0x3f800000
        floatGreater.
        if loc_8F
        pushInt. 0x1
        else loc_94

loc_8F:
        pushInt. 0x0

loc_94:
        if loc_117
        pushInt. 0x2711
        pushInt. 0x20000076
        sys 0x2, 0x16
        pushInt. 0x0
        pushInt. 0x100000d
        sys. 0x2, 0x17
        floatVarSet 0x0, 0x0
        pushInt. 0x6
        pushInt. 0x1100000f
        sys. 0x2, 0x16
        setVar 0x0, 0x1
        pushVar. 0x0, 0x1
        pushInt. 0xffffffff
        notEqual.
        if loc_102
        try loc_F0
        pushVar. 0x0, 0x1
        pushInt. 0x0
        pushVar. 0x0, 0x0
        pushInt. script_22
        callFunc 0x3

loc_F0:
        pushShort. 0x1b
        pushVar. 0x0, 0x1
        pushVar. 0x0, 0x0
        printf 0x3 #"sub_ftStatusUniqProcessDamage_execNormalDamageCommon motion kind: %d rate: %f"
        else loc_117

loc_102:
        pushInt. 0x4
        pushVar. 0x0, 0x0
        sys 0x2, 0x12
        pushShort. 0x1c
        pushVar. 0x0, 0x0
        printf 0x2 #"sub_ftStatusUniqProcessDamage_execNormalDamageCommon motion rate: %f"

loc_117:
        pushInt. 0x9
        pushInt. 0x11000004
        sys 0x2, 0x16
        pushInt. 0xf
        pushInt. 0x11000006
        sys 0x2, 0x16
        pushInt. 0xf
        pushInt. 0x11000007
        sys 0x2, 0x16
        pushInt. 0x10
        pushInt. 0x2000005a
        sys. 0x2, 0x16
        if loc_181
        pushInt. 0x2
        pushInt. 0xffffffff
        sys. 0x2, 0x11
        pushInt. 0x0
        pushInt. 0x1f
        sys. 0x2, 0x17
        floatLessOrEqual.
        if loc_181
        try loc_181
        pushInt. 0x1
        pushInt. script_2200
        callFunc 0x1

loc_181:
        end
