        begin 0x0, 0x11
        try. showMod
          pushInt. doMod
          callFunc 0x0
        showMod:
        pushInt. 0x0
        pushInt. DIChangeVar
        sys. 0x2, 0x17
        pushInt. 0.2f
        notEqual. # go to normal DI clause if necessary
        bitAnd.
        if shouldChangeDI
          pushInt. 0x0
          pushInt. DIChangeVar
          sys. 0x2, 0x17
          pushInt. 10.0f # if it's 10, do random DI
          equals.
          if calcRandomDI
            pushInt. 0x0
            pushInt. 0x8
            sys. 0x2, 0x9
            intToFloat 0x0
            negf.
            pushInt. 4.0f
            addf.
            pushInt. 0.785398f
            multf. # push random cardinal direction
            else getSinOfAngle
          calcRandomDI:
          pushInt. 0x0
          pushInt. DIChangeVar
          sys. 0x2, 0x17
          pushInt. 20.0f # if it's 20, do random DI in/away
          equals.
          if calcRandomDIInAway
            pushInt. 0x0
            pushInt. 0x2
            sys. 0x2, 0x9
            intToFloat 0x0
            negf.
            pushInt. 3.14159f
            multf. # push random left/right
            else getSinOfAngle
          calcRandomDIInAway:
          pushInt. 0x0
          pushInt. DIChangeVar
          sys. 0x2, 0x17
          pushInt. 30.0f # if it's 30, do random DI in/no DI/DI away
          equals.
          if calcRandomDIInAwayNoDI
            pushInt. 0x0
            pushInt. 0x3
            sys. 0x2, 0x9
            intToFloat 0x0
            pushInt. 0.5f
            multf.
            pushInt. 3.14159f
            multf.
            pushInt. 3.14159f
            subf. # push random left/right/none
            else getSinOfAngle
          calcRandomDIInAwayNoDI:
          pushInt. 0x0
          sys. 0x1, 0x15 # get facing direction
          pushInt. 1.0f # -1 is reversed from normal?
          equals.
          if shouldReverse
            pushInt. 0x0
            pushInt. DIChangeVar
            sys. 0x2, 0x17
            pushInt. 0.0f
            floatGreater.
            if angleIsPositive
              pushInt. 3.14159f
              pushInt. 0x0
              pushInt. DIChangeVar
              sys. 0x2, 0x17 , vals should be -pi through pi
              subf.
              else getSinOfAngle
            angleIsPositive:
              pushInt. 3.14159f
              pushInt. 0x0
              pushInt. DIChangeVar
              sys. 0x2, 0x17 , vals should be -pi through pi
              addf.
              else getSinOfAngle
          shouldReverse:
          pushInt. 0x0
          pushInt. DIChangeVar
          sys. 0x2, 0x17
          getSinOfAngle:
              floatVarSet 0x0, 0x0 # stickAngle
              try. getSin
                pushVar. 0x0, 0x0
                pushInt. sin
                callFunc 0x1
              getSin:
              floatVarSet 0x0, 0x1

              try. getCos
                pushVar. 0x0, 0x0
                pushInt. cos
                callFunc 0x1
              getCos:
              floatVarSet 0x0, 0x0
        else done
        shouldChangeDI:
          pushVar. 0x1, 0x30 # stickX
          floatVarSet 0x0, 0x0
          pushVar. 0x1, 0x20 # stickY
          floatVarSet 0x0, 0x1
        done:
        pushVar. 0x0, 0x0
        pushInt. 0x0
        floatNotEqual.
        ifNot loc_33
        pushVar. 0x0, 0x1
        pushInt. 0x0
        floatNotEqual.
        if loc_3D

loc_33:
        pushInt. 0x1
        else loc_42

loc_3D:
        pushInt. 0x0

loc_42:
        if loc_2CB
        pushInt. 0x4
        pushInt. 0x4
        sys. 0x2, 0x10
        pushInt. 0x0
        equals.
        if loc_60
        return_7

loc_60:
        pushInt. 0x4
        pushInt. 0x4
        sys. 0x2, 0x11
        floatVarSet 0x0, 0x2
        pushInt. 0x5
        pushInt. 0x4
        sys. 0x2, 0x11
        floatVarSet 0x0, 0x3
        pushInt. 0x0
        floatVarSet 0x0, 0x4
        pushInt. 0x3
        pushInt. 0x4
        sys. 0x2, 0x11
        floatVarSet 0x0, 0x5
        pushVar. 0x0, 0x5
        pushInt. 0x3727c5ac
        floatLess.
        if loc_AC
        return_7

loc_AC:
        pushInt. 0x0
        pushInt. 0x200011a
        sys. 0x2, 0x17
        floatVarSet 0x0, 0x6
        pushInt. 0x1
        try. loc_D2
        pushVar. 0x0, 0x3
        pushInt. script_13
        callFunc 0x1

loc_D2:
        try. loc_E2
        pushVar. 0x0, 0x2
        pushInt. script_13
        callFunc 0x1

loc_E2:
        sys. 0x3, 0xa
        pushVar. 0x0, 0x6
        floatGreater.
        if loc_2CB
        pushInt. 0x1
        pushVar. 0x0, 0x3
        pushVar. 0x0, 0x2
        sys. 0x3, 0xa
        floatVarSet 0x0, 0x7
        try. loc_123
        pushVar. 0x0, 0x3
        pushVar. 0x0, 0x0
        multf.
        pushVar. 0x0, 0x2
        negf.
        pushVar. 0x0, 0x1
        multf.
        addf.
        pushInt. script_13
        callFunc 0x1

loc_123:
        pushVar. 0x0, 0x5
        divf.
        floatVarSet 0x0, 0x8
        pushVar. 0x0, 0x2
        pushVar. 0x0, 0x1
        multf.
        pushVar. 0x0, 0x3
        pushVar. 0x0, 0x0
        multf.
        subf.
        floatVarSet 0x0, 0x9
        pushVar. 0x0, 0x9
        pushInt. 0x0
        floatLess.
        if loc_15B
        pushVar. 0x0, 0x8
        negf.
        floatVarSet 0x0, 0x8

loc_15B:
        pushVar. 0x0, 0x6
        pushVar. 0x0, 0x8
        multf.
        float+= 0x0, 0x7
        pushVar. 0x0, 0x7
        pushInt. 0xb4
        intToFloat 0x0
        multf.
        pushInt. 0x40490fdb
        divf.
        floatVarSet 0x0, 0xa
        try. loc_18E
        pushVar. 0x0, 0xa
        pushInt. script_13
        callFunc 0x1

loc_18E:
        floatVarSet 0x0, 0xa
        pushInt. 0x41c80000
        floatVarSet 0x0, 0xb
        pushVar. 0x0, 0xa
        pushInt. 0x42b40000
        pushVar. 0x0, 0xb
        subf.
        floatLessOrEqual.
        ifNot loc_1C3
        pushVar. 0x0, 0xa
        pushInt. 0x42b40000
        pushVar. 0x0, 0xb
        addf.
        floatGreaterOrEqual.
        if loc_1CD

loc_1C3:
        pushInt. 0x1
        else loc_1D2

loc_1CD:
        pushInt. 0x0

loc_1D2:
        if loc_291
        pushInt. 0x3f800000
        floatVarSet 0x0, 0xc
        pushInt. 0x0
        pushInt. 0x200011b
        sys. 0x2, 0x17
        floatVarSet 0x0, 0xd
        pushInt. 0x0
        pushInt. 0x200011c
        sys. 0x2, 0x17
        floatVarSet 0x0, 0xe
        pushVar. 0x0, 0x1
        pushInt. 0x0
        floatGreater.
        if loc_22F
        pushVar. 0x0, 0xd
        pushInt. 0x3f800000
        subf.
        pushVar. 0x0, 0x1
        multf.
        pushInt. 0x3f800000
        addf.
        floatVarSet 0x0, 0xc
        else loc_258

loc_22F:
        pushVar. 0x0, 0x1
        pushInt. 0x0
        floatLess.
        if loc_258
        pushInt. 0x3f800000
        pushInt. 0x3f800000
        pushVar. 0x0, 0xe
        subf.
        pushVar. 0x0, 0x1
        negf.
        multf.
        subf.
        floatVarSet 0x0, 0xc

loc_258:
        pushVar. 0x0, 0xc
        pushVar. 0x0, 0xe
        floatLess.
        if loc_26E
        pushVar. 0x0, 0xe
        floatVarSet 0x0, 0xc

loc_26E:
        pushVar. 0x0, 0xc
        pushVar. 0x0, 0xd
        floatGreater.
        if loc_284
        pushVar. 0x0, 0xd
        floatVarSet 0x0, 0xc

loc_284:
        pushVar. 0x0, 0x5
        pushVar. 0x0, 0xc
        multf.
        floatVarSet 0x0, 0x5

loc_291:
        pushVar. 0x0, 0x5
        pushInt. 0x4
        pushVar. 0x0, 0x7
        sys. 0x2, 0xa
        multf.
        floatVarSet 0x0, 0xf
        pushVar. 0x0, 0x5
        pushInt. 0x5
        pushVar. 0x0, 0x7
        sys. 0x2, 0xa
        multf.
        floatVarSet 0x0, 0x10
        pushInt. 0xd
        pushVar. 0x0, 0xf
        pushVar. 0x0, 0x10
        sys 0x3, 0x10

loc_2CB:
        end
